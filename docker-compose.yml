version: '3.8'

services:
  backend:
    build: ./Backend
    image: backend
    container_name: backend
    expose:
      - "8000"
    volumes:
      - backend:/app
    env_file:
      - .env
    networks:
      - transcendence
    depends_on:
      postgres:
        condition: service_healthy
      blockchain:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    build: ./Infrastructure/postgres
    image: postgres
    container_name: postgres
    expose:
      - "5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: unless-stopped

  blockchain:
    build: ./Infrastructure/Blockchain
    image: blockchain
    container_name: blockchain
    expose:
      - "8545"
    volumes:
      - blockchain:/etc/ethereum/Pong
    secrets:
      - password
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "localhost:8545"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: unless-stopped

  nginx:
    build: ./Infrastructure/nginx
    image: nginx
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - transcendence
    restart: unless-stopped

  frontend:
    build: ./Frontend
    image: frontend
    container_name: frontend
    expose:
      - "3000"
    volumes:
      - frontend:/app
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 30s
      retries: 15
    restart: unless-stopped


  elasticsearch:
    build: ./Infrastructure/elasticsearch
    image: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    env_file:
      - .env
    environment:
      - discovery.type=single-node
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 30s
      retries: 15
    restart: unless-stopped

  kibana:
    build: ./Infrastructure/kibana
    image: kibana
    container_name: kibana
    expose:
      - "5601"
    volumes:
      - kibana:/usr/share/kibana
    env_file:
      - .env
    networks:
      - transcendence
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  logstash:
    build: ./Infrastructure/logstash
    image: logstash
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - logstash:/usr/share/logstash/data
      - ./Infrastructure/logstash/pipeline/:/usr/share/logstash/pipeline/
    env_file:
      - .env
    networks:
      - transcendence
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

volumes:
  backend:
    name: backend
  postgres:
    name: postgres
  ssl: 
    name: ssl
  elasticsearch:
    name: elasticsearch
  kibana:
    name: kibana
  blockchain:
    name: eth
  logstash:
    name: logstash
  # frontend:
  #   name: frontend

secrets:
  password:
    file: ./Infrastructure/Blockchain/secrets/password

networks:
  transcendence:
    name: transcendence
    driver: bridge