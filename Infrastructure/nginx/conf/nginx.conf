events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Add explicit MIME type for JavaScript modules
    types {
        application/javascript    js;
        application/javascript    mjs;
    }

    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:3000;
   }

   upstream blockchain {
        server blockchain:8545;
    }

    server {
        listen 443 ssl default_server;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Specific location for OAuth callback
        location /oauth/callback.html {
            proxy_pass http://frontend/oauth/callback.html;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        location / {
            proxy_pass http://frontend/;
            
            # For SPA routing - try to find the file, if not found, route to /index.html
            proxy_intercept_errors on; 
            error_page 404 = /index.html;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }
        
        # Add specific location for JavaScript files
        location ~* \.js$ {
            proxy_pass http://frontend;
            add_header Content-Type application/javascript;
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /static/ {
            proxy_pass http://backend/static/;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /blockchain/ {
            proxy_pass http://blockchain;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

    }
}