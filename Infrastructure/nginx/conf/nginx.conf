# =============================================================
#  Nginx Reverse-Proxy Configuration for ft_transcendence
#  ----------------------------------------------------------
#  • Serves React SPA on "/"  ➜ frontend:3000
#  • Proxies API+static on "/api/" & "/static/"  ➜ backend:8000
#  • Serves Kibana UI on "/kibana/"  ➜ kibana:5601
#  • SSL certificates are provided via docker-compose volume (ssl:)
# =============================================================

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Add explicit MIME type for JavaScript modules
    types {
        application/javascript    js;
        application/javascript    mjs;
    }

    # --- Upstream targets ---------------------------------------------------
    # Each upstream maps a Docker service name to its internal port so that
    # we can reuse the name in multiple proxy_pass directives below.

    # Django backend (Gunicorn / ASGI)
    upstream backend {
        server backend:8000;
    }

    # React / Next.js frontend
    upstream frontend {
        server frontend:3000;
    }

    # Kibana dashboard
    upstream kibana {
        server kibana:5601;
    }

    # Local blockchain (Hardhat / Geth)
    upstream blockchain {
        server blockchain:8545;
    }

    server {
        listen 443 ssl default_server;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Specific location for OAuth callback
        location /oauth/callback.html {
            proxy_pass http://frontend/oauth/callback.html;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        location / {
            proxy_pass http://frontend/;
            
            # For SPA routing - try to find the file, if not found, route to /index.html
            proxy_intercept_errors on; 
            error_page 404 = /index.html;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }
        
        # JavaScript & other static assets will be resolved by the root (/) SPA
        # handler above, so we do **not** need a dedicated *.js location block.

        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /static/ {
            proxy_pass http://backend/static/;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    
        # Redirect bare /kibana to the canonical path with trailing slash so
        #     https://host/kibana   ➜  https://host/kibana/
        # Kibana relies on the trailing slash when server.basePath is set.
        # A 301 is perfect here because browsers will cache it.
        # -------------------------------------------------------------------
        # NOTE: If you later change SERVER_BASEPATH in kibana.yml remember to
        #       update this redirect accordingly.
        # -------------------------------------------------------------------
        # Redirect /kibana (without trailing slash) to /kibana/
        location = /kibana {
            return 301 /kibana/;
        }

        # Main Kibana proxy block.  ^~ makes sure this takes precedence over
        # regex locations like "~* \.css$" or similar should they be added
        # later.  We forward the entire sub-path so Kibana sees /kibana/* and
        # can internally strip it because we enabled SERVER_REWRITEBASEPATH.
        # -------------------------------------------------------------------
        # WebSocket upgrade headers are required for the live-streaming parts
        # of Kibana (logs, dev-tools, etc.).
        # -------------------------------------------------------------------
        # Use ^~ so this prefix location takes priority over regex (e.g., *.js) locations
        location ^~ /kibana/ {
            # Forward requests to the kibana container **without** path
            # manipulation.  The original URI (/kibana/…) is preserved.
            proxy_pass http://kibana;
            
            # Standard proxy headers
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Allow WebSocket connections
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Disable buffering for long-running Kibana requests / streams.
            # This keeps memory usage predictable under load.
            # Don't buffer responses
            proxy_buffering off;
        }

        location /blockchain/ {
            proxy_pass http://blockchain;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

    }
}